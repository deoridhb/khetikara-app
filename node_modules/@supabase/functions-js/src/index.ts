// supabase/functions/products/index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('https://ezctmesapmuuoiusjlau.supabase.co') ?? '',
      Deno.env.get('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV6Y3RtZXNhcG11dW9pdXNqbGF1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU0OTIyMTEsImV4cCI6MjA3MTA2ODIxMX0.kV1E_riNha-IgX5__Lf3XO1HTYhP4e01o_GlJ1Pbo_4
') ?? '',
    )

    const url = new URL(req.url)
    const method = req.method

    if (method === 'GET') {
      // Get all products with categories and grades
      const { data: products, error } = await supabaseClient
        .from('products')
        .select(`
          id,
          name,
          name_assamese,
          name_hindi,
          variety,
          variety_assamese,
          variety_hindi,
          unit,
          base_price,
          mrp,
          image_url,
          description,
          stock_quantity,
          min_order_qty,
          max_order_qty,
          categories (
            id,
            name,
            name_assamese,
            name_hindi
          ),
          product_grades (
            grade_key,
            grade_label,
            price_multiplier
          )
        `)
        .eq('is_active', true)
        .order('name')

      if (error) {
        throw error
      }

      return new Response(
        JSON.stringify({ products }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    return new Response(
      JSON.stringify({ error: 'Method not allowed' }),
      { status: 405, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }
})

// supabase/functions/orders/index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface OrderItem {
  product_id: string
  product_name: string
  product_variety: string
  grade_key: string
  grade_label: string
  unit_price: number
  quantity: number
  total_price: number
}

interface OrderRequest {
  customer: {
    phone: string
    name: string
    language_preference?: string
  }
  addresses: Array<{
    name: string
    phone: string
    flat_address: string
    pin_code: string
    street_address?: string
    landmark?: string
  }>
  items: OrderItem[]
  items_total: number
  handling_fee: number
  delivery_fee: number
  discount_amount: number
  total_amount: number
  notes?: string
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      }
    )

    if (req.method === 'POST') {
      const orderData: OrderRequest = await req.json()

      // Start transaction-like operations
      let customer_id: string

      // 1. Create or get customer
      const { data: existingCustomer } = await supabaseClient
        .from('customers')
        .select('id')
        .eq('phone', orderData.customer.phone)
        .single()

      if (existingCustomer) {
        customer_id = existingCustomer.id
        
        // Update customer info
        await supabaseClient
          .from('customers')
          .update({
            name: orderData.customer.name,
            language_preference: orderData.customer.language_preference || 'English'
          })
          .eq('id', customer_id)
      } else {
        const { data: newCustomer, error: customerError } = await supabaseClient
          .from('customers')
          .insert({
            phone: orderData.customer.phone,
            name: orderData.customer.name,
            language_preference: orderData.customer.language_preference || 'English'
          })
          .select('id')
          .single()

        if (customerError) throw customerError
        customer_id = newCustomer.id
      }

      // 2. Create addresses
      const addressPromises = orderData.addresses.map(address =>
        supabaseClient
          .from('addresses')
          .insert({
            customer_id,
            ...address
          })
      )
      await Promise.all(addressPromises)

      // 3. Create order
      const { data: order, error: orderError } = await supabaseClient
        .from('orders')
        .insert({
          customer_id,
          items_total: orderData.items_total,
          handling_fee: orderData.handling_fee,
          delivery_fee: orderData.delivery_fee,
          discount_amount: orderData.discount_amount,
          total_amount: orderData.total_amount,
          delivery_address: orderData.addresses[0], // Use first address as primary
          notes: orderData.notes,
          status: 'pending',
          payment_status: 'pending'
        })
        .select('id, order_number')
        .single()

      if (orderError) throw orderError

      // 4. Create order items
      const orderItemsData = orderData.items.map(item => ({
        order_id: order.id,
        ...item
      }))

      const { error: itemsError } = await supabaseClient
        .from('order_items')
        .insert(orderItemsData)

      if (itemsError) throw itemsError

      return new Response(
        JSON.stringify({ 
          success: true, 
          order_id: order.id,
          order_number: order.order_number
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // GET method - get orders for a customer
    if (req.method === 'GET') {
      const phone = url.searchParams.get('phone')
      
      if (!phone) {
        return new Response(
          JSON.stringify({ error: 'Phone number required' }),
          { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        )
      }

      const { data: orders, error } = await supabaseClient
        .from('orders')
        .select(`
          id,
          order_number,
          status,
          items_total,
          handling_fee,
          delivery_fee,
          discount_amount,
          total_amount,
          payment_status,
          delivery_address,
          notes,
          created_at,
          estimated_delivery,
          order_items (
            product_name,
            product_variety,
            grade_label,
            unit_price,
            quantity,
            total_price
          )
        `)
        .eq('customers.phone', phone)
        .order('created_at', { ascending: false })

      if (error) throw error

      return new Response(
        JSON.stringify({ orders }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    return new Response(
      JSON.stringify({ error: 'Method not allowed' }),
      { status: 405, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    console.error('Order function error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }
})
